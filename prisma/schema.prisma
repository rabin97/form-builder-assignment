generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // forms Form[]
}

model Form {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // userId          String          @db.ObjectId
  // user            User           @relation(fields: [userId], references: [id])

  categories          Category[]
  fillInBlanks        FillInTheBlank[]
  paragraph           Paragraph[]
  SubmittedFormAnswer SubmittedFormAnswer[]
}

model Category {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])

  answers Answer[]
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
}

model FillInTheBlank {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  formId  String @db.ObjectId
  form    Form   @relation(fields: [formId], references: [id])

  answers FillInTheBlankAnswer[]
}

model FillInTheBlankAnswer {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  answer           String
  fillInTheBlankId String         @db.ObjectId
  fillInTheBlank   FillInTheBlank @relation(fields: [fillInTheBlankId], references: [id])
}

model Paragraph {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  formId  String @db.ObjectId
  form    Form   @relation(fields: [formId], references: [id])

  questions McqQuestion[]
}

model McqQuestion {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  correctAnswer String

  answers     McqAnswer[]
  paragraph   Paragraph?  @relation(fields: [paragraphId], references: [id])
  paragraphId String?     @db.ObjectId
}

model McqAnswer {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  answer        String
  isCorrect     Boolean?
  mcqQuestionId String      @db.ObjectId
  mcqQuestion   McqQuestion @relation(fields: [mcqQuestionId], references: [id])
}

model SubmittedFormAnswer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fillInBlanks String
  preview      Json
  paragraphs   Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships (if any, to link with other tables like Forms or Users)
  form   Form   @relation(fields: [formId], references: [id])
  formId String @db.ObjectId
}
